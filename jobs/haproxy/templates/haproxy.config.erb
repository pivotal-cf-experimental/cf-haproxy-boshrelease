<% require "digest"%>

global
    log <%= p('ha_proxy.syslog_server') %> syslog <%= p('ha_proxy.log_level') %>
    daemon
    user vcap
    group vcap
    maxconn 64000
    spread-checks 4
    tune.ssl.default-dh-param <%= p("ha_proxy.default_dh_param") %>

defaults
    log global
    maxconn 64000
    option http-server-close
    option httplog
    option forwardfor
    option contstats
    timeout connect         <%= p("ha_proxy.connect_timeout").to_i    * 1000 %>ms
    timeout client          <%= p("ha_proxy.client_timeout").to_i     * 1000 %>ms
    timeout server          <%= p("ha_proxy.server_timeout").to_i     * 1000 %>ms
    timeout tunnel          <%= p("ha_proxy.websocket_timeout").to_i  * 1000 %>ms
    timeout http-keep-alive <%= p("ha_proxy.keepalive_timeout").to_i  * 1000 %>ms
    timeout http-request    <%= p("ha_proxy.request_timeout").to_i    * 1000 %>ms
    timeout queue           <%= p("ha_proxy.queue_timeout").to_i      * 1000 %>ms
    <% if p("ha_proxy.defaults").size > 0 %>
    <% p("ha_proxy.defaults").each do |default| %>
    <%= default %>
    <% end %>
    <% end %>

<%# HTTP Frontend %>

<% unless p("ha_proxy.disable_http") %>
frontend http-in
    mode http
    bind :80
    default_backend http-routers

<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl public src 0.0.0.0/0
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal public
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
    acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
    use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    acl xfp_exists hdr_cnt(X-Forwarded-Proto) gt 0
    reqadd X-Forwarded-Proto:\ http if ! xfp_exists
<% end %>

<% if p("ha_proxy.https_redirect_all") == true %>
    redirect scheme https code 301 if !{ ssl_fc }
<% end %>
<% unless p("ha_proxy.https_redirect_all") == true %>
    acl ssl_redirect hdr(host),lower,map_end(/var/vcap/jobs/haproxy/config/ssl_redirect.map,false) -m str true
    redirect scheme https code 301 if ssl_redirect
<% end %>

<%# HTTPS Frontend %>

<% if_p("ha_proxy.ssl_pem") do |pem| %>
frontend https-in
    mode http
    bind :443 ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3 ciphers <%= p("ha_proxy.ssl_ciphers") %>
    default_backend http-routers

<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl public src 0.0.0.0/0
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal public
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
  acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
  use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    reqadd X-Forwarded-Proto:\ https
<% end %>

<%# HTTPS Websockets Frontend %>

<% if p("ha_proxy.enable_4443") == true %>
frontend wss-in
    mode http
    bind :4443 ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3 ciphers <%= p("ha_proxy.ssl_ciphers") %>
    default_backend http-routers

<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl public src 0.0.0.0/0
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal public
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
  acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
  use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    reqadd X-Forwarded-Proto:\ https

<%# Default Backend %>

<% end %>
backend http-routers
    mode http
    balance roundrobin
    <% if p("ha_proxy.compress_types") != "" %>
    compression algo gzip
    compression type <%= p("ha_proxy.compress_types") %>
    <% end %>
    <% p("ha_proxy.backend_servers").each_with_index do |ip, index| %>
        server node<%= index %> <%= ip %>:<%= p("ha_proxy.backend_port") %> check inter 1000
    <% end %>

<%# Routed Backends %>

<% p('ha_proxy.routed_backend_servers').each do |prefix, data| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
backend http-routed-backend-<%= prefix_hash %>
    mode http
    balance roundrobin
    <% if p("ha_proxy.compress_types") != "" %>
    compression algo gzip
    compression type <%= p("ha_proxy.compress_types") %>
    <% end %>
    <% data["servers"].each_with_index do |ip, index| %>
        server node<%= index %> <%= ip %>:<%= data["port"] %> check inter 1000
    <% end %>
<% end %>
